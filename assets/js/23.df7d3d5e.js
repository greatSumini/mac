(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{442:function(s,t,a){"use strict";a.r(t);var e=a(11),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"패키지-관리자-apple-silicon-m1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#패키지-관리자-apple-silicon-m1"}},[s._v("#")]),s._v(" 패키지 관리자 (Apple Silicon/M1)")]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("Intel")]),s._v(" "),a("p",[s._v("이 페이지는 "),a("strong",[s._v("Apple Silicon 사용자")]),s._v("를 대상으로 작성하였습니다."),a("br"),s._v("\nIntel 사용자는 "),a("a",{attrs:{href:"./index"}},[s._v("패키지 관리자 (Intel)")]),s._v(" 페이지를 확인하세요.")])]),s._v(" "),a("div",{staticClass:"image-600"},[a("custom-image",{attrs:{src:"/imgs/apple-silicon/m1.jpg",alt:"M1"}})],1),s._v(" "),a("p",[s._v("2020년 11월 Intel 대신 M1 CPU가 탑재된 Mac이 등장하고 개발 환경에 작은(?) 변화가 생겼습니다. 생각보다 빠르게 많은 개발 도구들이 M1을 지원하기 시작했지만 아직은 혼란스러운 상황으로 설정이 조금 복잡해졌습니다.")]),s._v(" "),a("p",[s._v("Apple Silicon의 특징을 알아보고 개발환경을 설정해 봅시다.")]),s._v(" "),a("h2",{attrs:{id:"apple-silicon-m1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apple-silicon-m1"}},[s._v("#")]),s._v(" Apple Silicon (M1)")]),s._v(" "),a("p",[s._v("Intel 프로세서 아키텍처는 "),a("code",[s._v("x86_64")]),s._v("이고 Apple Silicon M1은 "),a("code",[s._v("arm64")]),s._v(" 아키텍처입니다. Apple은 M1에서 Intel 기반의 앱을 지원하기 위해 "),a("code",[s._v("Rosetta 2")]),s._v("라는 에뮬레이터를 만들었습니다. Rosetta 2는 백그라운드에서 작동하며, Apple Silicon에서 사용할 수 있도록 Intel 기반 앱을 자동으로 변환합니다.")]),s._v(" "),a("p",[s._v("Rosetta 2를 사용한 앱은 놀랍게도 네이티브와 거의 성능 차이가 느껴지지 않습니다. "),a("s",[s._v("기술력 무엇?!")]),s._v(" Apple Silicon 용으로 새로 빌드한 앱을 사용하는 게 가장 좋지만, Intel 기반 앱을 사용해도 큰 이슈는 없습니다. 대부분 잘 실행되니까요.")]),s._v(" "),a("p",[s._v("M1 등장 이후 앱은 총 3가지 방식으로 제공됩니다.")]),s._v(" "),a("ol",[a("li",[s._v("Apple Silicon 기반 앱")]),s._v(" "),a("li",[s._v("Intel 기반 앱")]),s._v(" "),a("li",[s._v("알아서 둘 다 돌아가는 Universal 앱")])]),s._v(" "),a("p",[s._v("Apple Silicon 기반 Mac을 사용하는 사용자는 1번 또는 3번을 사용하고 없으면 2번을 사용하면 됩니다. 참 쉽죠??")]),s._v(" "),a("p",[a("strong",[s._v("⚠️ 하지만, 개발환경은 상황이 조금 다릅니다. ⚠️")])]),s._v(" "),a("p",[s._v("CLI 프로그램도 앱과 동일하게 "),a("code",[s._v("arm64")]),s._v(" 빌드를 우선 사용하고, 없으면 "),a("code",[s._v("x86_64")]),s._v(" 빌드를 사용하면 됩니다. 예를 들어 Node.js 최신 버전은 "),a("code",[s._v("arm64")]),s._v("와 "),a("code",[s._v("x86_64")]),s._v(" 빌드를 제공하지만, 구버전은 "),a("code",[s._v("x86_64")]),s._v("빌드만 제공하므로 최신 버전은 네이티브로, 구버전은 "),a("code",[s._v("Rosetta 2")]),s._v("로 변환하여 사용할 수 있습니다.")]),s._v(" "),a("p",[s._v("문제는 "),a("strong",[s._v("설치하는 과정")]),s._v("입니다. Node.js는 버전관리 프로그램("),a("code",[s._v("nvm")]),s._v("이나 "),a("code",[s._v("asdf")]),s._v(")을 사용하는 것이 일반적인데 "),a("code",[s._v("arm64")]),s._v(" 아키텍처는 구버전을 설치할 수가 없습니다. 동일한 버전관리 프로그램을 상황에 따라 최신 버전은 "),a("code",[s._v("arm64")]),s._v("를 사용하고 구버전은 "),a("code",[s._v("x86_64")]),s._v("를 사용하는 방법이 필요한 것이죠.")]),s._v(" "),a("p",[s._v("가장 좋은 건 모든 개발환경을 "),a("code",[s._v("arm64")]),s._v("로 통일하는 것이지만, 레거시"),a("s",[s._v("부들부들")]),s._v("와 의존성 라이브러리 이슈로 한동안 아키텍처를 혼용할 수밖에 없습니다.")]),s._v(" "),a("p",[a("code",[s._v("Rosetta 2")]),s._v("를 설치하고 아키텍처를 혼용해서 사용하는 방법을 알아봅니다.")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("성능비교")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://subicura.com/k8s/",target:"_blank",rel:"noopener noreferrer"}},[s._v("쿠버네티스 안내서"),a("OutboundLink")],1),s._v(" 빌드속도를 이용한 대략적인 성능은 다음과 같습니다. (*시간이 짧을수록 빠름/5회 평균)")]),s._v(" "),a("p",[s._v("Native vs Rosetta")]),s._v(" "),a("ul",[a("li",[s._v("MacBook Air 2020 / M1 / Node.js 16.8.0 (arm64 build): "),a("code",[s._v("8.1s")])]),s._v(" "),a("li",[s._v("MacBook Air 2020 / M1 / Node.js 16.8.0 (x86_64 build) Rosetta 2: "),a("code",[s._v("16.9s")])])]),s._v(" "),a("p",[s._v("Intel Processor Sample")]),s._v(" "),a("ul",[a("li",[s._v("MacBook Pro 2019 / 2.6 GHz 6-Core Intel Core i7 / Node.js 16.8.0: "),a("code",[s._v("14.4s")])]),s._v(" "),a("li",[s._v("iMac 2020 / 3.8 GHz 8-Core Intel Core i7 / Node.js 16.8.0: "),a("code",[s._v("11.5s")])])]),s._v(" "),a("p",[s._v("arm64 네이티브가 가장 빠르고, Rosetta 2를 이용한 x86_64 가상화도 그럭저럭 쓸만한 성능을 보여줍니다.")])]),s._v(" "),a("h3",{attrs:{id:"rosetta-2-설치"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rosetta-2-설치"}},[s._v("#")]),s._v(" Rosetta 2 설치")]),s._v(" "),a("p",[s._v("x86_64 프로그램을 실행하면 자동으로 설치 안내 팝업이 뜹니다. 수동으로 설치하려면 다음 명령어를 입력합니다.")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("softwareupdate --install-rosetta --agree-to-license\n")])])]),a("h3",{attrs:{id:"활성-상태-보기activity-monitor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#활성-상태-보기activity-monitor"}},[s._v("#")]),s._v(" 활성 상태 보기"),a("sup",[s._v("Activity Monitor")])]),s._v(" "),a("custom-image",{attrs:{src:"/imgs/apple-silicon/activity-monitor.png",alt:"Activity Monitor"}}),s._v(" "),a("p",[s._v("현재 애플리케이션이 어떤 아키텍처로 동작하는지(Rosetta를 사용한 건지) 확인하려면 Active Monitor를 확인하세요.")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("Apple")]),s._v(": arm64 (Native)")]),s._v(" "),a("li",[a("code",[s._v("Intel")]),s._v(": x86_64 (Rosetta 2)")])]),s._v(" "),a("h3",{attrs:{id:"x86-64-터미널-실행"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#x86-64-터미널-실행"}},[s._v("#")]),s._v(" x86_64 터미널 실행")]),s._v(" "),a("p",[s._v("개발 환경을 x86_64로 설정하는 가장 쉬운 방법은 터미널 프로그램을 Rosetta로 실행하는 방법입니다.")]),s._v(" "),a("p",[s._v("터미널 프로그램(Terminal 또는 iTerm2) 아이콘에서 오른쪽 버튼 누르고 "),a("code",[s._v("Get Info")]),s._v("를 선택하고 "),a("code",[s._v("Open using Rosetta")]),s._v("를 체크합니다.")]),s._v(" "),a("div",{staticClass:"image-350 no-radius"},[a("custom-image",{attrs:{src:"/imgs/apple-silicon/iterm-info.png",alt:"iTerm Info"}})],1),s._v(" "),a("p",[s._v("이제 터미널 명령어가 x86_64기반으로 실행됩니다.")]),s._v(" "),a("p",[s._v("그.런.데 매번 "),a("code",[s._v("Open using Rosetta")]),s._v("를 껐다 켤 수는 없으므로 앱을 복사하여 2개를 설정합니다.")]),s._v(" "),a("div",{staticClass:"image-450 no-radius"},[a("custom-image",{attrs:{src:"/imgs/apple-silicon/iterms.png",alt:"iTerm App"}})],1),s._v(" "),a("ol",[a("li",[a("code",[s._v("Applications")]),s._v(" 폴더의 "),a("code",[s._v("iTerm")]),s._v(" 아이콘에서 오른쪽 버튼 누르고 "),a("code",[s._v("복제")]),a("sup",[s._v("Duplicate")]),s._v("를 선택합니다.")]),s._v(" "),a("li",[s._v("복제한 앱 이름을 "),a("code",[s._v("iTerm(x86)")]),s._v("으로 변경합니다.")]),s._v(" "),a("li",[a("code",[s._v("iTerm(x86)")]),s._v(" 아이콘에서 오른쪽 버튼 누르고 "),a("code",[s._v("Get Info")]),s._v("를 선택하고 "),a("code",[s._v("Open using Rosetta")]),s._v("를 체크합니다.")])]),s._v(" "),a("p",[s._v("이제 평소엔 "),a("code",[s._v("iTerm")]),s._v("을 사용하고 설치나 빌드 오류가 발생하여 x86_64 가상화가 필요한 경우 "),a("code",[s._v("iTerm(x86)")]),s._v("을 사용합니다.")]),s._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[s._v("터미널 2개가 복잡해요 ;ㅁ;")]),s._v(" "),a("p",[s._v("터미널 2개를 사용하는 방식이 복잡하거나 x86_64 기반 개발을 주로 한다면, "),a("code",[s._v("Open using Rosetta")]),s._v("를 체크한 터미널 하나만 사용하는 것이 가장 속 편한 방법입니다. M1 출시 초반, 많은 프로그램이 "),a("code",[s._v("arm64")]),s._v("를 지원하지 않을 때 주로 사용했던 방법이고 "),a("code",[s._v("Rosetta 2")]),s._v("가 쓸만하기 때문에 꽤 괜찮은 성능을 보여줍니다.")])]),s._v(" "),a("h3",{attrs:{id:"iterm-status-bar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterm-status-bar"}},[s._v("#")]),s._v(" iTerm Status Bar")]),s._v(" "),a("p",[s._v("지금 사용 중인 터미널의 프로세서 아키텍처를 iTerm 상태바에 추가합니다.")]),s._v(" "),a("div",{staticClass:"image-600 no-radius"},[a("custom-image",{attrs:{src:"/imgs/apple-silicon/iterm-arm64.png",alt:"iTerm arm64"}}),s._v(" "),a("custom-image",{attrs:{src:"/imgs/apple-silicon/iterm-x86_64.png",alt:"iTerm x86_64"}})],1),s._v(" "),a("p",[s._v("iTerm에서 Shell 정보를 가져오도록 "),a("code",[s._v("iTerm2")]),s._v(" > "),a("code",[s._v("Install Shell Integration")]),s._v("을 선택합니다.")]),s._v(" "),a("div",{staticClass:"image-600 no-radius"},[a("custom-image",{attrs:{src:"/imgs/apple-silicon/iterm-shell.png",alt:"iTerm Shell"}})],1),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("스크립트 추가하기")]),s._v(" "),a("p",[a("code",[s._v("Shell Integration")]),s._v("이 정상적으로 동작하지 않는다면 다음 코드를 "),a("code",[s._v(".zshrc")]),s._v("에 입력해주세요.")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("test")]),s._v(" -e "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("HOME")]),s._v("}")]),s._v('/.iterm2_shell_integration.zsh"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("HOME")]),s._v("}")]),s._v('/.iterm2_shell_integration.zsh"')]),s._v("\n")])])])]),s._v(" "),a("p",[s._v("설치가 완료되면, 다음 명령어를 입력하여 프로세서 아키텍처 명령어("),a("code",[s._v("uname -m")]),s._v(")를 "),a("code",[s._v("\\(user.cpu)")]),s._v("로 연동합니다.")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'EOF'"),a("span",{pre:!0,attrs:{class:"token bash punctuation"}},[s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.zprofile")]),s._v("\niterm2_print_user_vars() {\n  CPU=$(uname -m)\n  iterm2_set_user_var cpu $CPU\n}\n\nEOF")]),s._v("\n")])])]),a("p",[s._v("이제 iTerm 관련 프로필을 설정합니다.")]),s._v(" "),a("custom-image",{attrs:{src:"/imgs/apple-silicon/iterm-teminal.png",alt:"iTerm Terminal"}}),s._v(" "),a("p",[a("code",[s._v("Shell Integration")]),s._v("을 하면 쉘 프롬프트에 삼각형 마커가 추가되는데 불필요하므로 제거합니다.")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("Profiles")]),s._v(" > "),a("code",[s._v("Terminal")]),s._v(": Show mark indicators 체크 해제")])]),s._v(" "),a("custom-image",{attrs:{src:"/imgs/apple-silicon/iterm-statusbar.png",alt:"iTerm Statusbar"}}),s._v(" "),a("p",[a("code",[s._v("Status Bar")]),s._v("에서 "),a("code",[s._v("Interpolated String")]),s._v("를 드래그하여 추가합니다.")]),s._v(" "),a("custom-image",{attrs:{src:"/imgs/apple-silicon/iterm-statusbar-detail.png",alt:"iTerm Statusbar Detail"}}),s._v(" "),a("p",[a("code",[s._v("Configure Component")]),s._v("를 선택하고 "),a("code",[s._v("String Value")]),s._v("에 "),a("code",[s._v("🅲 \\(user.cpu)")]),s._v("를 입력합니다. 그 외에 사이즈나 우선순위등을 변경합니다.")]),s._v(" "),a("h3",{attrs:{id:"아키텍처-관련-명령어"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#아키텍처-관련-명령어"}},[s._v("#")]),s._v(" 아키텍처 관련 명령어")]),s._v(" "),a("p",[s._v("현재 터미널이 어떤 아키텍처로 실행중인지 확인해보겠습니다.")]),s._v(" "),a("p",[s._v("기본 터미널은 "),a("code",[s._v("arm64")]),s._v("로 실행되지만 "),a("code",[s._v("Open using Rosetta")]),s._v("로 실행했다면 "),a("code",[s._v("x86_64")]),s._v("로 보입니다.")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -m\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# arm64")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# x86_64")]),s._v("\n")])])]),a("p",[a("code",[s._v("arch")]),s._v(" 명령어를 입력하면 실행한 터미널 환경과 상관없이 강제로 특정 아키텍처로 앱을 실행할 수 있습니다.")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ arch -x86_64 /bin/zsh "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Intel")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -m\nx86_64\n\n$ arch -arm64 /bin/zsh "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Apple Silicon (M1)")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -m\narm64\n")])])]),a("p",[a("strong",[s._v("프로그램 지원 여부 확인")])]),s._v(" "),a("p",[a("code",[s._v("file")]),s._v(" 명령어로 바이너리가 지원하는 아키텍처를 확인할 수 있습니다.")]),s._v(" "),a("p",[s._v("Intel만 지원하는 바이너리(x86_64):")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" /usr/local/bin/nvim\n/usr/local/bin/nvim: Mach-O "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("-bit executable x86_64\n")])])]),a("p",[s._v("Apple Silicon(M1)만 지원하는 바이너리(arm64):")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" /opt/homebrew/bin/jq\n/opt/homebrew/bin/jq: Mach-O "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("-bit executable arm64\n")])])]),a("p",[s._v("Intel과 Apple Silicon 둘 다 지원하는 바이너리:")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" /bin/zsh\n/bin/zsh: Mach-O universal binary with "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" architectures: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("x86_64:Mach-O "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("-bit executable x86_64"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("arm64e:mach-o "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("-bit executable arm64e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n/bin/zsh "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("for architecture x86_64"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": Mach-O "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("-bit executable x86_64\n/bin/zsh "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("for architecture arm64e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": Mach-O "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v("-bit executable arm64e\n")])])]),a("h2",{attrs:{id:"command-line-tools"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command-line-tools"}},[s._v("#")]),s._v(" Command Line Tools")]),s._v(" "),a("p",[s._v("M1의 특성을 어느정도 알았으니, 본격적으로 개발환경을 설정합니다.")]),s._v(" "),a("p",[s._v("macOS는 기본적으로 "),a("code",[s._v("gcc")]),s._v(", "),a("code",[s._v("make")]),s._v("와 같은 컴파일 도구가 설치되어 있지 않기 때문에 명령어 도구"),a("sup",[s._v("Command Line Tools")]),s._v("를 설치해야 합니다. Xcode를 설치해도 되지만 iOS 개발을 할 게 아니라면 용량이 작은 명령어 도구만 따로 설치합니다.")]),s._v(" "),a("p",[a("strong",[s._v("설치")])]),s._v(" "),a("p",[s._v("CLI에서 "),a("code",[s._v("gcc")]),s._v("나 "),a("code",[s._v("python")]),s._v(" 같은 명령어를 입력하면 자동으로 다음과 같은 화면이 뜨고 "),a("code",[s._v("Install")]),s._v("을 선택하면 명령어 도구를 설치합니다."),a("br"),s._v("\n(iTerm 실행 시 설치했다면 skip!)")]),s._v(" "),a("div",{staticClass:"image-450 no-radius"},[a("custom-image",{attrs:{src:"/imgs/intel/xcode-install.png",alt:"XCode Install"}})],1),s._v(" "),a("p",[s._v("수동으로 설치하려면 다음 명령어를 입력합니다.")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("xcode-select --install\n")])])]),a("p",[a("strong",[s._v("설치 확인")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# gcc test")]),s._v("\n\n$ gcc\nclang: error: no input files\n")])])]),a("h2",{attrs:{id:"homebrew"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#homebrew"}},[s._v("#")]),s._v(" Homebrew")]),s._v(" "),a("p",[s._v("brew"),a("sup",[s._v("homebrew")]),s._v("는 각종 커맨드라인 프로그램과 일반 애플리케이션(크롬..)을 손쉽게 설치해주는 Mac용 패키지 매니저입니다. 리눅스의 "),a("code",[s._v("apt")]),s._v("나 "),a("code",[s._v("yum")]),s._v("과 비슷하며 다양한 프로그램을 복잡한 빌드과정 없이 손쉽게 설치하고 업데이트, 관리도 간단하므로 개발을 할 때 반드시 설치해야 하는 필수 프로그램입니다. "),a("code",[s._v("그냥 홈페이지 가서 다운로드하고 설치하는 게 편한데..")]),s._v("라고 할 수 있지만, 나중에 업데이트나 삭제를 생각해보면 글쎄요.. brew 쓰세요!")]),s._v(" "),a("p",[a("strong",[s._v("설치")])]),s._v(" "),a("p",[a("code",[s._v("x86_64")]),s._v("와 "),a("code",[s._v("arm64")]),s._v(" 두 가지 brew를 모두 설치하고 실행 중인 터미널 환경에 맞는 "),a("code",[s._v("brew")]),s._v("가 실행되도록 "),a("code",[s._v("~/.zprofile")]),s._v("에 분기 설정을 합니다. 그리고 "),a("code",[s._v("arm64")]),s._v(" 터미널에서 "),a("code",[s._v("x86_64")]),s._v("만 지원하는 프로그램을 설치할 수 있도록 "),a("code",[s._v("ibrew")]),s._v(" alias를 추가합니다.")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# install homebrew (arm64)")]),s._v("\narch -arm64 /bin/bash -c "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# install homebrew (x86_64)")]),s._v("\narch -x86_64 /bin/bash -c "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# set homebrew env")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'EOF'"),a("span",{pre:!0,attrs:{class:"token bash punctuation"}},[s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.zprofile")]),s._v('\nCPU=$(uname -m)\nif [[ "$CPU" == "arm64" ]]; then\n  eval "$(/opt/homebrew/bin/brew shellenv)"\nelse\n  export PATH=/opt/homebrew/bin:$PATH\n  eval "$(/usr/local/bin/brew shellenv)"\nfi\n\nalias ibrew="arch -x86_64 /usr/local/bin/brew"\nalias abrew="arch -arm64 /opt/homebrew/bin/brew"\n\nEOF')]),s._v("\n")])])]),a("p",[s._v("터미널을 재시작합니다.")]),s._v(" "),a("p",[a("strong",[s._v("설치 확인")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# brew test")]),s._v("\n$ brew doctor\nYour system is ready to brew.\n")])])]),a("h2",{attrs:{id:"git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[s._v("#")]),s._v(" Git")]),s._v(" "),a("p",[s._v("버전 관리 도구로 유명한 git입니다. 다들 아시죠? macOS에 기본으로 설치되어 있지만, 최신 버전이 아니므로 brew를 이용해서 업데이트합니다. git-lfs 는 Git Large File Storage로 용량이 큰 바이너리 파일을 git으로 관리할 때 유용합니다. git 설치할 때 같이 설치합니다.")]),s._v(" "),a("p",[a("strong",[s._v("설치")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("brew "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" git-lfs\n")])])]),a("p",[s._v("git 설치가 완료되었으면 개인정보를 설정하고 맥에서 한글 파일명을 정상적으로 처리하기 위해 추가 옵션을 설정합니다. "),a("s",[s._v("망할 한글처리")])]),s._v(" "),a("p",[a("strong",[s._v("설정")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" lfs "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Your Name"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global user.email "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"you@your-domain.com"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.precomposeunicode "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global core.quotepath "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n")])])])],1)}),[],!1,null,null,null);t.default=n.exports}}]);